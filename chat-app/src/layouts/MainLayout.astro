---
import "../styles/global.css";
import { ClientRouter } from "astro:transitions";
import Header from "../components/blocks/header";
import { supabaseServerClient } from "@/lib/supabase";
import { Toaster } from "@/components/ui/sonner";

const { hideHeader = false } = Astro.props;

const supabaseBE = supabaseServerClient({
	request: Astro.request,
	cookies: Astro.cookies,
});

const {
	data: { user },
} = await supabaseBE.auth.getUser();

const activeUser = user
	? {
			id: user.id,
			email: user.email,
			avatarUrl: user.user_metadata?.avatar_url ?? "",
		}
	: null;

const serializedUser = activeUser ? JSON.stringify(activeUser) : null;
---

<script is:inline>
	const getThemePreference = () => {
		if (typeof localStorage !== "undefined" && localStorage.getItem("theme")) {
			const storedTheme = localStorage.getItem("theme");
			// Handle all three theme options: light, dark, system
			if (storedTheme === "system") {
				return window.matchMedia("(prefers-color-scheme: dark)").matches
					? "dark"
					: "light";
			}
			return storedTheme;
		}
		return window.matchMedia("(prefers-color-scheme: dark)").matches
			? "dark"
			: "light";
	};

	const applyTheme = () => {
		const isDark = getThemePreference() === "dark";
		document.documentElement.classList[isDark ? "add" : "remove"]("dark");
	};

	// Apply theme initially
	applyTheme();

	// Listen for system preference changes when theme is "system"
	const setupSystemListener = () => {
		const mq = window.matchMedia("(prefers-color-scheme: dark)");
		const handler = () => {
			if (
				typeof localStorage !== "undefined" &&
				localStorage.getItem("theme") === "system"
			) {
				applyTheme();
			}
		};
		mq.addEventListener("change", handler);
	};

	setupSystemListener();

	// Re-setup after route transitions
	document.addEventListener("astro:after-swap", () => {
		// Small delay to ensure DOM is ready
		setTimeout(() => {
			applyTheme();
			setupSystemListener();
		}, 10);
	});

	if (typeof localStorage !== "undefined") {
		let isUpdatingFromCode = false;
		let lastKnownTheme = localStorage.getItem("theme");

		const observer = new MutationObserver(() => {
			// Prevent infinite loops when we're updating programmatically
			if (isUpdatingFromCode) return;

			const isDark = document.documentElement.classList.contains("dark");
			const currentStoredTheme = localStorage.getItem("theme");

			// Only update localStorage if:
			// 1. Current theme isn't "system"
			// 2. AND the stored theme actually changed (not just a route transition)
			// 3. AND it's not a programmatic update
			if (
				currentStoredTheme !== "system" &&
				currentStoredTheme !== lastKnownTheme
			) {
				localStorage.setItem("theme", isDark ? "dark" : "light");
				lastKnownTheme = isDark ? "dark" : "light";
			}
		});

		observer.observe(document.documentElement, {
			attributes: true,
			attributeFilter: ["class"],
		});

		// Helper function for programmatic theme changes
		window.setThemeProgrammatically = (theme) => {
			isUpdatingFromCode = true;
			localStorage.setItem("theme", theme);
			lastKnownTheme = theme;

			const isDark =
				theme === "dark" ||
				(theme === "system" &&
					window.matchMedia("(prefers-color-scheme: dark)").matches);
			document.documentElement.classList[isDark ? "add" : "remove"]("dark");

			// Use a longer timeout to ensure the DOM update completes
			setTimeout(() => {
				isUpdatingFromCode = false;
			}, 50);
		};
	}
</script>

<!-- Pass user data to client-side via global variable -->
<script is:inline define:vars={{ serializedUser }}>
	// Set initial user data on window for client-side access
	window.initialUserData = serializedUser ? JSON.parse(serializedUser) : null;
</script>

<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta
			name="description"
			content="WCAG Accessibility Assistant - Get expert help with web accessibility guidelines"
		/>
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<title>WCAG Chat</title>
		<ClientRouter />
	</head>

	<body>
		<Toaster richColors position="top-center" client:only="react" />
		{!hideHeader && <Header client:only="react" />}

		<slot />
	</body>
</html>
