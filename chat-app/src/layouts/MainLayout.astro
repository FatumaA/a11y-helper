---
import "../styles/global.css";
import { ClientRouter } from "astro:transitions";
import Header from "@/components/blocks/header";
import { supabaseServerClient } from "@/lib/supabase";
import { Toaster } from "@/components/ui/sonner";

const { hideHeader = false } = Astro.props;

const supabaseBE = supabaseServerClient({
	request: Astro.request,
	cookies: Astro.cookies,
});

const {
	data: { user },
} = await supabaseBE.auth.getUser();

const activeUser = user
	? {
			id: user.id,
			email: user.email,
			avatarUrl: user.user_metadata?.avatar_url ?? "",
		}
	: null;

const serializedUser = activeUser ? JSON.stringify(activeUser) : null;
---

<script is:inline>
	const getThemePreference = () => {
		if (typeof localStorage !== "undefined" && localStorage.getItem("theme")) {
			return localStorage.getItem("theme");
		}
		return window.matchMedia("(prefers-color-scheme: dark)").matches
			? "dark"
			: "light";
	};
	const isDark = getThemePreference() === "dark";
	document.documentElement.classList[isDark ? "add" : "remove"]("dark");

	if (typeof localStorage !== "undefined") {
		const observer = new MutationObserver(() => {
			const isDark = document.documentElement.classList.contains("dark");
			localStorage.setItem("theme", isDark ? "dark" : "light");
		});
		observer.observe(document.documentElement, {
			attributes: true,
			attributeFilter: ["class"],
		});
	}
</script>

<!-- Pass user data to client-side via global variable -->
<script is:inline define:vars={{ serializedUser }}>
	// Set initial user data on window for client-side access
	window.initialUserData = serializedUser ? JSON.parse(serializedUser) : null;
</script>

<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta
			name="description"
			content="WCAG Accessibility Assistant - Get expert help with web accessibility guidelines"
		/>
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<title>WCAG Chat</title>
		<ClientRouter />
	</head>

	<body>
		<Toaster richColors position="top-center" client:only="react" />
		{!hideHeader && <Header client:only="react" />}

		<slot />
	</body>
</html>
